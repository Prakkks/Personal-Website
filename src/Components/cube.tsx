/*
    Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import gsap from 'gsap';
import { useGSAP } from '@gsap/react';
import { useRef, useState } from 'react';
import { Float, useGLTF, useTexture } from '@react-three/drei';
import {  type Group } from 'three';

const Cube = ({ ...props }) => {
  const { nodes, materials } = useGLTF('models/rounded_cube.glb');
  const texture = useTexture('textures/cube.png');

  const cubeRef = useRef<Group>(null);
  const [hovered, setHovered] = useState(false);


  useGSAP(() => {
    console.log('cubeRef.current:', cubeRef.current)
    if (!cubeRef.current) return; // safety check

    gsap.timeline({ repeat: -1, repeatDelay: 0.5 }).to(cubeRef.current.position, {
          y: hovered ? '+=2' : `+=${Math.PI * 2}`,
        x: hovered ? '+=2' : `-=${Math.PI * 2}`,
        z: hovered ? '+=2' : `-=${Math.PI * 2}`,
        duration: 2.5,
        stagger: {
          each: 0.15,
        },
    });
  }, [hovered]); 

  
  return (
    <Float floatIntensity={2}>
      <group position={[9, -4, 0]} rotation={[Math.PI / 2, 0, 0]} scale={0.9} dispose={null} {...props}>
    
    {Object.values(nodes).map((node, index) => {
  if (node.type === 'Mesh') {
    const {  ...rest } = node;

    return (
      <mesh
        key={index}
        {...rest}
        material={materials.Cube}
        castShadow
        receiveShadow
        onPointerEnter={() => setHovered(true)}
      >
        <meshMatcapMaterial matcap={texture} toneMapped={false} />
      </mesh>
    );
  }
    return null;
})}
      </group>
    </Float>
  );
};



useGLTF.preload('models/rounded_cube.glb')




export default Cube;